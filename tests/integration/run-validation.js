#!/usr/bin/env node

/**
 * SCRIPT PRINCIPAL DE VALIDATION
 * Ex√©cute tous les tests de validation automatiquement
 */

const validateAllFeatures = require('./validate-all-features');
const validateWithMCP = require('./mcp-validation');
const validateProgressionChart = require('./validation-progression-chart');

async function runCompleteValidation() {
    console.log('üöÄ VALIDATION COMPL√àTE DU SITE');
    console.log('===============================');
    console.log('Ce script va ex√©cuter tous les tests de validation automatiquement.\n');
    
    const startTime = Date.now();
    const results = {
        timestamp: new Date().toISOString(),
        startTime: startTime,
        validations: []
    };
    
    try {
        // 1. Validation des fonctionnalit√©s de base
        console.log('üìã √âTAPE 1: Validation des fonctionnalit√©s de base');
        console.log('==================================================');
        const basicValidation = await validateAllFeatures();
        results.validations.push({
            type: 'basic-features',
            status: 'completed',
            result: basicValidation
        });
        
        // 2. Validation MCP
        console.log('\nüîß √âTAPE 2: Validation MCP');
        console.log('===========================');
        const mcpValidation = await validateWithMCP();
        results.validations.push({
            type: 'mcp-validation',
            status: 'completed',
            result: mcpValidation
        });
        
        // 3. Validation sp√©cialis√©e du graphique
        console.log('\nüìä √âTAPE 3: Validation sp√©cialis√©e du graphique');
        console.log('===============================================');
        const chartValidation = await validateProgressionChart();
        results.validations.push({
            type: 'progression-chart',
            status: 'completed',
            result: chartValidation
        });
        
        // Calculer le temps total
        const totalTime = Date.now() - startTime;
        results.totalTime = totalTime;
        results.status = 'SUCCESS';
        
        // Sauvegarder le rapport final
        const fs = require('fs');
        const finalReport = `complete-validation-report-${Date.now()}.json`;
        fs.writeFileSync(finalReport, JSON.stringify(results, null, 2));
        
        console.log('\nüéâ VALIDATION COMPL√àTE TERMIN√âE AVEC SUCC√àS !');
        console.log('==============================================');
        console.log(`‚è±Ô∏è  Temps total: ${totalTime}ms`);
        console.log(`üìä Rapport final: ${finalReport}`);
        console.log('\n‚úÖ Toutes les fonctionnalit√©s sont valid√©es et fonctionnelles !');
        
        return finalReport;
        
    } catch (error) {
        const totalTime = Date.now() - startTime;
        results.totalTime = totalTime;
        results.status = 'FAILED';
        results.error = error.message;
        
        // Sauvegarder le rapport d'erreur
        const fs = require('fs');
        const errorReport = `validation-error-report-${Date.now()}.json`;
        fs.writeFileSync(errorReport, JSON.stringify(results, null, 2));
        
        console.error('\n‚ùå VALIDATION √âCHOU√âE !');
        console.error('=======================');
        console.error(`‚è±Ô∏è  Temps √©coul√©: ${totalTime}ms`);
        console.error(`‚ùå Erreur: ${error.message}`);
        console.error(`üìä Rapport d'erreur: ${errorReport}`);
        
        throw error;
    }
}

// Ex√©cuter la validation compl√®te
if (require.main === module) {
    runCompleteValidation().catch(console.error);
}

module.exports = runCompleteValidation;
